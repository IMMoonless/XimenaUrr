// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    <groupId>co.edu.itm</groupId>
    <artifactId>api-festivos</artifactId>
    <version>1.0.0</version>
    <name>api-festivos</name>
    <description>API para validar fechas festivas en Colombia</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/co/edu/itm/apifestivos/ApiRestApplication.java
package co.edu.itm.apifestivos;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ApiRestApplication {
    public static void main(String[] args) {
        SpringApplication.run(ApiRestApplication.class, args);
    }
}

// src/main/java/co/edu/itm/apifestivos/entities/Festivo.java
package co.edu.itm.apifestivos.entities;

import jakarta.persistence.*;

@Entity
@Table(name = "festivos")
public class Festivo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "dia")
    private Integer dia;
    
    @Column(name = "mes")
    private Integer mes;
    
    @Column(name = "nombre", nullable = false)
    private String nombre;
    
    @Column(name = "tipo", nullable = false)
    private Integer tipo;
    
    @Column(name = "dias_pascua")
    private Integer diasPascua;
    
    // Constructores
    public Festivo() {}
    
    public Festivo(Integer dia, Integer mes, String nombre, Integer tipo, Integer diasPascua) {
        this.dia = dia;
        this.mes = mes;
        this.nombre = nombre;
        this.tipo = tipo;
        this.diasPascua = diasPascua;
    }
    
    // Getters y Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public Integer getDia() { return dia; }
    public void setDia(Integer dia) { this.dia = dia; }
    
    public Integer getMes() { return mes; }
    public void setMes(Integer mes) { this.mes = mes; }
    
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
    
    public Integer getTipo() { return tipo; }
    public void setTipo(Integer tipo) { this.tipo = tipo; }
    
    public Integer getDiasPascua() { return diasPascua; }
    public void setDiasPascua(Integer diasPascua) { this.diasPascua = diasPascua; }
}

// src/main/java/co/edu/itm/apifestivos/entities/Tipo.java
package co.edu.itm.apifestivos.entities;

import jakarta.persistence.*;

@Entity
@Table(name = "tipos")
public class Tipo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "tipo", nullable = false)
    private String tipo;
    
    // Constructores
    public Tipo() {}
    
    public Tipo(String tipo) {
        this.tipo = tipo;
    }
    
    // Getters y Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public String getTipo() { return tipo; }
    public void setTipo(String tipo) { this.tipo = tipo; }
}

// src/main/java/co/edu/itm/apifestivos/dto/ValidacionFestivoResponse.java
package co.edu.itm.apifestivos.dto;

import com.fasterxml.jackson.annotation.JsonFormat;
import java.time.LocalDate;

public class ValidacionFestivoResponse {
    @JsonFormat(pattern = "yyyy-MM-dd")
    private LocalDate fecha;
    private boolean esFestivo;
    private String nombre;
    
    public ValidacionFestivoResponse() {}
    
    public ValidacionFestivoResponse(LocalDate fecha, boolean esFestivo, String nombre) {
        this.fecha = fecha;
        this.esFestivo = esFestivo;
        this.nombre = nombre;
    }
    
    // Getters y Setters
    public LocalDate getFecha() { return fecha; }
    public void setFecha(LocalDate fecha) { this.fecha = fecha; }
    
    public boolean isEsFestivo() { return esFestivo; }
    public void setEsFestivo(boolean esFestivo) { this.esFestivo = esFestivo; }
    
    public String getNombre() { return nombre; }
    public void setNombre(String nombre) { this.nombre = nombre; }
}

// src/main/java/co/edu/itm/apifestivos/repositories/FestivoRepository.java
package co.edu.itm.apifestivos.repositories;

import co.edu.itm.apifestivos.entities.Festivo;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface FestivoRepository extends JpaRepository<Festivo, Long> {
    List<Festivo> findByDiaAndMes(Integer dia, Integer mes);
    List<Festivo> findByTipo(Integer tipo);
}

// src/main/java/co/edu/itm/apifestivos/repositories/TipoRepository.java
package co.edu.itm.apifestivos.repositories;

import co.edu.itm.apifestivos.entities.Tipo;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TipoRepository extends JpaRepository<Tipo, Long> {
}

// src/main/java/co/edu/itm/apifestivos/services/FestivoService.java
package co.edu.itm.apifestivos.services;

import co.edu.itm.apifestivos.dto.ValidacionFestivoResponse;
import co.edu.itm.apifestivos.entities.Festivo;
import co.edu.itm.apifestivos.repositories.FestivoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

@Service
public class FestivoService {
    
    @Autowired
    private FestivoRepository festivoRepository;
    
    public ValidacionFestivoResponse validarFestivo(String fechaStr, int año, int mes, int dia) {
        LocalDate fecha;
        
        try {
            fecha = LocalDate.of(año, mes, dia);
        } catch (Exception e) {
            return new ValidacionFestivoResponse(null, false, "Fecha no válida");
        }
        
        // Buscar festivos fijos (tipo 1)
        List<Festivo> festivosFijos = festivoRepository.findByDiaAndMes(dia, mes);
        for (Festivo festivo : festivosFijos) {
            if (festivo.getTipo() == 1) {
                return new ValidacionFestivoResponse(fecha, true, festivo.getNombre());
            }
        }
        
        // Verificar festivos con ley de puente (tipo 2)
        Festivo festivoPuente = verificarLeyPuente(año, dia, mes);
        if (festivoPuente != null) {
            return new ValidacionFestivoResponse(fecha, true, festivoPuente.getNombre());
        }
        
        // Verificar festivos basados en Pascua (tipos 3 y 4)
        Festivo festivoPascua = verificarFestivosPascua(año, fecha);
        if (festivoPascua != null) {
            return new ValidacionFestivoResponse(fecha, true, festivoPascua.getNombre());
        }
        
        return new ValidacionFestivoResponse(fecha, false, "No es festivo");
    }
    
    private Festivo verificarLeyPuente(int año, int dia, int mes) {
        List<Festivo> festivosPuente = festivoRepository.findByTipo(2);
        
        for (Festivo festivo : festivosPuente) {
            LocalDate fechaOriginal = LocalDate.of(año, festivo.getMes(), festivo.getDia());
            LocalDate fechaTrasladadada = trasladarAlSiguienteLunes(fechaOriginal);
            
            if (fechaTrasladadada.getDayOfMonth() == dia && fechaTrasladadada.getMonthValue() == mes) {
                return festivo;
            }
        }
        return null;
    }
    
    private Festivo verificarFestivosPascua(int año, LocalDate fechaConsulta) {
        LocalDate domingoRamos = calcularDomingoRamos(año);
        LocalDate domingoPascua = domingoRamos.plusDays(7);
        
        List<Festivo> festivosPascua = festivoRepository.findByTipo(3);
        festivosPascua.addAll(festivoRepository.findByTipo(4));
        
        for (Festivo festivo : festivosPascua) {
            LocalDate fechaFestivo = domingoPascua.plusDays(festivo.getDiasPascua());
            
            if (festivo.getTipo() == 4) {
                fechaFestivo = trasladarAlSiguienteLunes(fechaFestivo);
            }
            
            if (fechaFestivo.equals(fechaConsulta)) {
                return festivo;
            }
        }
        return null;
    }
    
    private LocalDate calcularDomingoRamos(int año) {
        // Algoritmo del examen
        int a = año % 19;
        int b = año % 4;
        int c = año % 7;
        int d = (19 * a + 24) % 30;
        int dias = d + (2 * b + 4 * c + 6 * d + 5) % 7;
        
        // Fecha base: 15 de marzo
        LocalDate fechaBase = LocalDate.of(año, 3, 15);
        return fechaBase.plusDays(dias);
    }
    
    private LocalDate trasladarAlSiguienteLunes(LocalDate fecha) {
        // Si es lunes, se queda igual
        if (fecha.getDayOfWeek().getValue() == 1) {
            return fecha;
        }
        
        // Calcular días hasta el siguiente lunes
        int diasHastaLunes = 8 - fecha.getDayOfWeek().getValue();
        return fecha.plusDays(diasHastaLunes);
    }
}

// src/main/java/co/edu/itm/apifestivos/controllers/FestivoController.java
package co.edu.itm.apifestivos.controllers;

import co.edu.itm.apifestivos.dto.ValidacionFestivoResponse;
import co.edu.itm.apifestivos.services.FestivoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/festivos")
@CrossOrigin(origins = "*")
public class FestivoController {
    
    @Autowired
    private FestivoService festivoService;
    
    @GetMapping("/validar/{año}/{mes}/{dia}")
    public ResponseEntity<ValidacionFestivoResponse> validarFestivo(
            @PathVariable int año,
            @PathVariable int mes, 
            @PathVariable int dia) {
        
        String fechaStr = String.format("%04d-%02d-%02d", año, mes, dia);
        ValidacionFestivoResponse response = festivoService.validarFestivo(fechaStr, año, mes, dia);
        
        return ResponseEntity.ok(response);
    }
}

// src/main/resources/application.properties
server.port=8080
spring.application.name=api-festivos

# H2 Database configuration
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# JPA configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

# H2 Console (for development)
spring.h2.console.enabled=true

// src/main/resources/data.sql
-- Insertar tipos de festivos
INSERT INTO tipos (tipo) VALUES ('Fijo');
INSERT INTO tipos (tipo) VALUES ('Ley de Puente festivo');
INSERT INTO tipos (tipo) VALUES ('Basado en el domingo de pascua');
INSERT INTO tipos (tipo) VALUES ('Basado en el domingo de pascua y Ley de Puente festivo');

-- Insertar festivos según la tabla del examen
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (1, 1, 'Año nuevo', 1, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (6, 1, 'Santos Reyes', 2, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (19, 3, 'San José', 2, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (null, null, 'Jueves Santo', 3, -3);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (null, null, 'Viernes Santo', 3, -2);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (null, null, 'Domingo de Pascua', 3, 0);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (1, 5, 'Día del Trabajo', 1, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (null, null, 'Ascensión del Señor', 4, 40);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (null, null, 'Corpus Christi', 4, 61);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (null, null, 'Sagrado Corazón de Jesús', 4, 68);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (29, 6, 'San Pedro y San Pablo', 2, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (20, 7, 'Independencia Colombia', 1, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (7, 8, 'Batalla de Boyacá', 1, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (15, 8, 'Asunción de la Virgen', 2, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (12, 10, 'Día de la Raza', 2, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (1, 11, 'Todos los santos', 2, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (11, 11, 'Independencia de Cartagena', 2, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (8, 12, 'Inmaculada Concepción', 1, null);
INSERT INTO festivos (dia, mes, nombre, tipo, dias_pascua) VALUES (25, 12, 'Navidad', 1, null);

// README.md
# API REST Festivos Colombia - Spring Boot

Esta API permite validar si una fecha específica es festiva en Colombia según la legislación colombiana.

## Características

- ✅ Desarrollada en **Spring Boot 3.2**
- ✅ Base de datos **H2** (en memoria para desarrollo)
- ✅ **JPA/Hibernate** para el manejo de datos
- ✅ Implementa los 4 tipos de festivos colombianos
- ✅ Cálculo automático de fechas basadas en Pascua
- ✅ Ley de puente festivo
- ✅ Validación de fechas inválidas

## Tipos de Festivos

1. **Fijo**: No se puede variar (ej: Año Nuevo, Navidad)
2. **Ley de Puente**: Se traslada al siguiente lunes
3. **Basado en Pascua**: Se calcula desde el Domingo de Pascua
4. **Pascua + Puente**: Basado en Pascua y trasladado al lunes

## Endpoint Principal

```
GET /festivos/validar/{año}/{mes}/{dia}
```

## Ejemplos de Uso

### Fecha festiva
```bash
GET /festivos/validar/2023/6/12
```
**Respuesta:**
```json
{
  "fecha": "2023-06-12",
  "esFestivo": true,
  "nombre": "Corpus Christi"
}
```

### Fecha no festiva
```bash
GET /festivos/validar/2023/2/28
```
**Respuesta:**
```json
{
  "fecha": "2023-02-28",
  "esFestivo": false,
  "nombre": "No es festivo"
}
```

### Fecha inválida
```bash
GET /festivos/validar/2023/2/35
```
**Respuesta:**
```json
{
  "fecha": null,
  "esFestivo": false,
  "nombre": "Fecha no válida"
}
```

## Algoritmo de Cálculo de Pascua

Implementa la fórmula especificada en el examen:
- a = Año MOD 19
- b = Año MOD 4  
- c = Año MOD 7
- d = (19a+24) MOD 30
- dias = d + (2b+4c+6d+5) MOD 7

El Domingo de Ramos = 15 de marzo + dias
El Domingo de Pascua = Domingo de Ramos + 7 días

## Instalación y Ejecución

1. **Clonar el repositorio**
2. **Ejecutar con Maven:**
   ```bash
   mvn spring-boot:run
   ```
3. **Acceder a la API:** `http://localhost:8080`
4. **Consola H2 (desarrollo):** `http://localhost:8080/h2-console`

## Estructura del Proyecto

```
src/main/java/co/edu/itm/apifestivos/
├── ApiRestApplication.java          # Clase principal
├── controllers/
│   └── FestivoController.java       # Controlador REST
├── services/
│   └── FestivoService.java          # Lógica de negocio
├── entities/
│   ├── Festivo.java                 # Entidad Festivo
│   └── Tipo.java                    # Entidad Tipo
├── repositories/
│   ├── FestivoRepository.java       # Repositorio Festivos
│   └── TipoRepository.java          # Repositorio Tipos
└── dto/
    └── ValidacionFestivoResponse.java # DTO de respuesta
```

## Base de Datos

La aplicación utiliza H2 en memoria con los datos precargados según la tabla del examen.

**Conexión H2:**
- URL: `jdbc:h2:mem:testdb`
- Usuario: `sa`
- Contraseña: (vacía)
